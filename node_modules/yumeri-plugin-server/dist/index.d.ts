import { Context, Core, Config, Session, Platform, ConfigSchema } from 'yumeri';
export declare const provide: string[];
/**
 * 服务器配置接口
 */
export interface ServerConfig {
    /**
     * 服务器监听端口
     * @default 14510
     */
    port: number;
    /**
     * 服务器监听地址
     * @default "0.0.0.0"
     */
    host: string;
    /**
     * 是否启用CORS
     * @default true
     */
    enableCors: boolean;
    /**
     * 静态文件目录
     * @default "static"
     */
    staticDir: string;
    /**
     * 是否启用 WebSocket 支持
     * @default true
     */
    enableWs: boolean;
}
/**
 * 默认服务器配置
 */
export declare const config: {
    schema: Record<string, ConfigSchema>;
};
export declare class Server extends Platform {
    /** 核心实例 */
    private core;
    /** 服务器监听端口 */
    private port;
    /** 服务器监听地址 */
    private host;
    /** HTTP 服务器实例 */
    private httpServer;
    /** WebSocket 服务器实例 */
    private wsServer;
    /** 是否启用 CORS */
    private enableCors;
    /** 静态文件目录 */
    private staticDir;
    /** 是否启用 WebSocket 支持 */
    private enableWs;
    /**
     * 创建服务器实例
     * @param core 核心实例
     * @param config 服务器配置
     */
    constructor(core: Core, config?: Partial<ServerConfig>);
    /**
     * 终止会话
     * @param session 会话对象
     * @param message 消息内容
     */
    terminationSession(session: Session, message: any): void;
    /**
     * 获取平台ID
     * @returns 平台ID
     */
    getPlatformId(): string;
    /**
     * 获取平台状态
     * @returns 平台状态对象
     */
    getPlatformStatus(): {
        port: number;
        host: string;
        running: boolean;
        enableCors: boolean;
        staticDir: string;
        enableWs: boolean;
    };
    /**
     * 获取平台版本代码
     * @returns 版本代码字符串
     */
    getPlatformVersionCode(): string;
    /**
     * 获取平台名称
     * @returns 平台名称
     */
    getPlatformName(): string;
    /**
     * 启动平台
     * @param core 可选的核心实例
     * @returns Promise<void>
     */
    startPlatform(core?: Core): Promise<void>;
    /**
     * 停止平台服务
     * @returns 返回一个 Promise，表示平台停止操作的完成状态
     */
    stopPlatform(): Promise<void>;
    /**
     * 向会话发送消息
     * @param session 会话对象
     * @param data 要发送的数据
     */
    sendMessage(session: Session, data: any): void;
    /**
     * 处理会话数据
     * @param session 会话对象
     * @param data 会话数据
     * @returns 处理后的数据
     */
    processSessionData(session: Session, data: any): any;
    /**
     * 获取客户端IP地址
     * @param req HTTP请求对象
     * @returns 客户端IP地址
     */
    private getClientIP;
    /**
     * 解析请求体
     * @param req HTTP请求对象
     * @returns 解析后的参数
     */
    private parseRequestBody;
    /**
     * 解析Cookie
     * @param req HTTP请求对象
     * @returns Cookie对象
     */
    private parseCookies;
    /**
     * 获取平台配置模式
     * @returns 配置模式对象
     */
    static getConfigSchema(): Record<string, ConfigSchema>;
}
export declare function apply(ctx: Context, config: Config): Promise<void>;
export declare function disable(ctx: Context): Promise<void>;
